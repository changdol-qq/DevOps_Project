pipeline {
    agent any
    environment {
        DOCKER_IMAGE = '533267155172.dkr.ecr.ap-northeast-2.amazonaws.com/web_app'
        ECR_CREDENTIALS_ID = credentials('AWS_CREDENTIAL')
        ECR_REGISTRY = '533267155172.dkr.ecr.ap-northeast-2.amazonaws.com'
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = "ap-northeast-2"
        PATH = "${env.PATH}:/var/lib/jenkins/.local/bin"
    }
    //체크 아웃
    stages {
        stage('Checkout SCM'){
            steps{
                script{
                    checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/changdol-qq/DevOps_Project.git', credentialsId: 'git_hub_token']])
                }
            }
        }
        stage('Setup Virtual Environment') {
            steps {
                script {
                    sh 'sudo python3 -m venv venv'
                    sh '''
                    . venv/bin/activate
                    sudo pip install --upgrade pip
                    '''
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                    . venv/bin/activate
                    sudo pip install --ignore-installed blinker
                    sudo pip install pytest Flask Flask-Migrate Flask-SQLAlchemy Flask-WTF Flask-Login Flask-Bcrypt wtforms_alchemy WTForms psycopg2-binary
                    '''
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    dir('Python_Web_Application/tests') {
                        sh '''
                        # Activate the virtual environment
                        . ../../venv/bin/activate
                        # Print the PATH for debugging
                        echo $PATH
                        # Check if pytest is accessible
                        which pytest
                        # Run pytest
                        pytest test_project.py
                        '''
                    }
                }
            }
        }
    stage('Build Docker Image') {
            steps {
                script {
                    dir('Python_Web_Application') {  
                        docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
 
                    }
                }
            }
        }
    stage('Push Image to ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_CREDENTIAL']]) {
                        sh "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                        sh "docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                    }
                }
            }
        }
    stage('Deploy pod'){
        steps{
            script{
                        sh "kubectl set image deployment/deployment-app web-app=${DOCKER_IMAGE}:${env.BUILD_NUMBER} --record -n app-ns"
                }
            }
        }
    }
}

